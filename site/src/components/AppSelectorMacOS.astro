v---
---
<style>
    #preview {
        background: #1a1a1a;
        padding: 10px;
        margin-right: 5px;
        overflow-x: auto;
        overflow-y: auto;
        max-height: 400px;
        width: 50vw;
        color: #0f0;
        text-align: left;
        box-sizing: border-box;
        white-space: pre;
        margin: 0;
    }
    button {
		background-color: #192841;
		color: #c3fffc;
        margin-right: 5px;
        margin-top: 5px;
		text-decoration: none;
		padding: 10px 20px;
        font-size: 16px;
        border-radius: 6px;
        position: relative;
        border: 1px solid #192841;
	}
	button:hover {
		background-color: #c3fffc;
		color: #192841;
        margin-right: 5px;
        margin-top: 5px;
		text-decoration: none;
		padding: 10px 20px;
        font-size: 16px;
        border-radius: 6px;
        position: relative;
		border: 1px solid #192841;
	}
    .btn-coming-soon {
        background-color: #31363f;
        color: #c3fffc;
        margin-right: 5px;
        margin-top: 5px;
        border: 1px solid #31363f;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 6px;
        cursor: not-allowed;
        position: relative;
    }

    .btn-coming-soon:hover::after {
        border: 1px solid #192841;
        content: "Coming Soon!";
        position: absolute;
        top: 120%;
        left: 50%;
        transform: translateX(-50%);
        background-color: #c3fffc;
        color: #192841;
        padding: 6px 10px;
        border-radius: 4px;
        font-size: 14px;
        white-space: nowrap;
        z-index: 100;
    }
    a {
		background-color: #192841;
		color: #c3fffc;
        margin-right: 5px;
        margin-top: 5px;
		text-decoration: none;
		padding: 10px 20px;
		font-size: 16px;
		border-radius: 6px;
		position: relative;
    	border: 1px solid #192841;
	}
	a:hover {
		background-color: #c3fffc;
		color: #192841;
        margin-right: 5px;
        margin-top: 5px;
		text-decoration: none;
		padding: 10px 20px;
		font-size: 16px;
		border-radius: 6px;
		position: relative;
		border: 1px solid #192841;
	}
        .banner {
			background-color: #ec3750;
			color: white;
			text-align: center;
			padding: 12px 20px;
			font-family: sans-serif;
			font-weight: bold;
			position: relative;
			border-radius: 10px;
		}

		.banner a {
			color: white;
			text-decoration: underline;
			font-weight: 600;
			margin-left: 10px;
		}

		.close-banner {
			position: absolute;
			right: 10px;
			top: 10px;
			background: none;
			border: none;
			color: white;
			font-size: 16px;
			cursor: pointer;
		}

		@media (max-width: 600px) {
			.banner {
				font-size: 14px;
				padding: 10px;
			}
		}
</style>
<script>
    let selected: any[] = [];
    let apiKey = '';
    let preview = '';
    let apps = [];

    const generateTracker = (selectedApps: any[], apiKey: string) => {
    const appsBlock = selectedApps
        .map((app: { data: any; }) => JSON.stringify(app.data, null, 4))
        .join(',\n');

    return `import time
import base64
import urllib.request
import urllib.error
import json
import psutil
from datetime import datetime
import pyautogui
import subprocess

WAKATIME_API_KEY = '${apiKey}'
HEARTBEAT_INTERVAL = 120
CHECK_INTERVAL = 30

APPS = [
    ${appsBlock}
]

def is_process_running(name):
    for proc in psutil.process_iter(['name']):
        if name.lower() in (proc.info['name'] or "").lower():
            return True
    return False

def get_active_window_title():
    try:
        script = 'tell application "System Events" to get name of first application process whose frontmost is true'
        proc = subprocess.Popen(['osascript', '-e', script], stdout=subprocess.PIPE)
        out, _ = proc.communicate()
        return out.decode('utf-8').strip()
    except:
        pass
    return None

def user_is_active(window_title=None, threshold_seconds=CHECK_INTERVAL):
    pos1 = pyautogui.position()
    time.sleep(threshold_seconds)
    pos2 = pyautogui.position()
    return pos1 != pos2 and get_active_window_title() == window_title

def save_heartbeat_local(payload):
    with open("heartbeats.json", "a", encoding='utf-8') as f:
        json.dump(payload, f)
        f.write("\n")

def send_heartbeat(entity, app_config):
    encoded_key = base64.b64encode(WAKATIME_API_KEY.encode()).decode()
    headers = {
        "Authorization": f"Basic {encoded_key}",
        "Content-Type": "application/json"
    }
    payload = {
        "time": datetime.utcnow().timestamp(),
        "entity": entity,
        "type": "app",
        "category": "coding",
        "is_write": False,
        "project": app_config['project'],
        "language": app_config['language'],
        "plugin": app_config['plugin']
    }
    req = urllib.request.Request(
        url='https://hackatime.hackclub.com/api/hackatime/v1/users/current/heartbeats',
        data=json.dumps(payload).encode('utf-8'),
        headers=headers,
        method='POST'
    )
    try:
        with urllib.request.urlopen(req) as response:
            print(f"[{datetime.now()}] Heartbeat: {entity} -> {app_config['project']} ({response.status})")
            save_heartbeat_local(payload)
    except urllib.error.HTTPError as e:
        print(f"[{datetime.now()}] HTTP error: {e.code} - {e.reason}")
    except urllib.error.URLError as e:
        print(f"[{datetime.now()}] Network error: {e.reason}")

def main():
    last_sent = {app['process_name']: 0 for app in APPS}
    last_window = {app['process_name']: "" for app in APPS}

    while True:
        now = time.time()
        current_title = get_active_window_title()

        for app in APPS:
            if is_process_running(app['process_name']):
                if current_title and app['window_keyword'].lower() in current_title.lower():
                    if user_is_active(window_title=current_title):
                        if now - last_sent[app['process_name']] > HEARTBEAT_INTERVAL or current_title != last_window[app['process_name']]:
                            send_heartbeat(current_title, app)
                            last_sent[app['process_name']] = now
                            last_window[app['process_name']] = current_title

if __name__ == "__main__":
    main()`;
    };

    const updatePreview = () => {
        preview = generateTracker(selected, apiKey);
        const el = document.getElementById('preview');
        if (el) el.textContent = preview;
    };

    (window as Record<string, any>).applyApiKey = () => {
    const input = document.getElementById('api-key');
    if (input instanceof HTMLInputElement) {
        apiKey = input.value.trim();
        updatePreview();
    }
    };

    (window as Record<string, any>).copyToClipboard = () => {
        const el = document.getElementById('preview');
        if (!el) return;
        
        const text = el.textContent;
        navigator.clipboard.writeText(text)
            .then(() => alert("Copied to clipboard!"))
            .catch(err => alert("Failed to copy: " + err));
    }

    (window as Record<string, any>).downloadPython = () => {
        const blob = new Blob([preview], { type: "text/x-python" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'tracker.py';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    fetch('/api/apps/macos')
    .then(res => res.json())
    .then(json => {
        apps = json;
        const container = document.getElementById('app-form');
        if (container) {
        container.innerHTML = '';
        apps.forEach((app: { name: any; }) => {
            const label = document.createElement('label');
            label.style.display = 'block';
            label.innerHTML = `<input type='checkbox' value='${app.name}'> ${app.name}`;
            label.querySelector('input').addEventListener('change', (e) => {
            const isChecked = e.currentTarget.checked;
            if (isChecked) {
                selected.push(app);
            } else {
                selected = selected.filter(a => a.name !== app.name);
            }
            updatePreview();
            });
            container.appendChild(label);
        });
        }
    });
      
    fetch('/api/linux/edge')
    .then(res => res.json())
    .then(json => {
        apps = json;
        const container = document.getElementById('app-form-edge');
        if (container) {
        container.innerHTML = '';
        apps.forEach((app: { name: any; }) => {
            const label = document.createElement('label');
            label.style.display = 'block';
            label.innerHTML = `<input type='checkbox' value='${app.name}'> ${app.name}`;
            label.querySelector('input').addEventListener('change', (e) => {
            const isChecked = e.currentTarget.checked;
            if (isChecked) {
                selected.push(app);
            } else {
                selected = selected.filter(a => a.name !== app.name);
            }
            updatePreview();
            });
            container.appendChild(label);
        });
        }
    });

    fetch('/api/apps/linux/chrome')
    .then(res => res.json())
    .then(json => {
        apps = json;
        const container = document.getElementById('app-form-chrome');
        if (container) {
        container.innerHTML = '';
        apps.forEach((app: { name: any; }) => {
            const label = document.createElement('label');
            label.style.display = 'block';
            label.innerHTML = `<input type='checkbox' value='${app.name}'> ${app.name}`;
            label.querySelector('input').addEventListener('change', (e) => {
            const isChecked = e.currentTarget.checked;
            if (isChecked) {
                selected.push(app);
            } else {
                selected = selected.filter(a => a.name !== app.name);
            }
            updatePreview();
            });
            container.appendChild(label);
        });
        }
    });

    fetch('/api/apps/linux/firefox')
    .then(res => res.json())
    .then(json => {
        apps = json;
        const container = document.getElementById('app-form-firefox');
        if (container) {
        container.innerHTML = '';
        apps.forEach((app: { name: any; }) => {
            const label = document.createElement('label');
            label.style.display = 'block';
            label.innerHTML = `<input type='checkbox' value='${app.name}'> ${app.name}`;
            label.querySelector('input').addEventListener('change', (e) => {
            const isChecked = e.currentTarget.checked;
            if (isChecked) {
                selected.push(app);
            } else {
                selected = selected.filter(a => a.name !== app.name);
            }
            updatePreview();
            });
            container.appendChild(label);
        });
        }
    });

    fetch('/api/linux/firefox')
    .then(res => res.json())
    .then(json => {
        apps = json;
        const container = document.getElementById('app-form-firefox');
        if (container) {
        container.innerHTML = '';
        apps.forEach((app: { name: any; }) => {
            const label = document.createElement('label');
            label.style.display = 'block';
            label.innerHTML = `<input type='checkbox' value='${app.name}'> ${app.name}`;
            label.querySelector('input').addEventListener('change', (e) => {
            const isChecked = e.currentTarget.checked;
            if (isChecked) {
                selected.push(app);
            } else {
                selected = selected.filter(a => a.name !== app.name);
            }
            updatePreview();
            });
            container.appendChild(label);
        });
        }
    });
</script>
<div>
    <div class="banner" id="banner">
		MacOS is beta version! Test and tell what you think, dm @lucas on Slack or send an email to lucas [at] devlucas [dot] page
		<button class="close-banner" onclick="document.getElementById('banner').style.display='none';">✕</button>
	</div>
    <h1>Select your apps!</h1>
    <div style="align-items: center; justify-content: center; display: flex;">
        <form id="app-form" style="text-align: left;"></form>
    </div>

    <br />
    
    <a href="../contribute">I want another app!</a>
    <br />
    <br />

    <br />
    <h1>Chrome</h1>
    <div style="align-items: center; justify-content: center; display: flex;">
        <form id="app-form-chrome" style="text-align: left;"></form>
    </div>

    <br />
    <h1>Edge</h1>
    <div style="align-items: center; justify-content: center; display: flex;">
        <form id="app-form-edge" style="text-align: left;"></form>
    </div>

    <br />
    <h1>Firefox</h1>
    <div style="align-items: center; justify-content: center; display: flex;">
        <form id="app-form-firefox" style="text-align: left;"></form>
    </div>

    <br />
    <h1>Safari</h1>
    <div style="align-items: center; justify-content: center; display: flex;">
        <form id="app-form-safari" style="text-align: left;"></form>
    </div>

    <label>
        API Key:
        <input id="api-key" type="text" placeholder="YOUR_WAKATIME_API_KEY" />
    </label>

    <br />
    <br />

    <button type="button" onclick="applyApiKey()">Add API Key</button>
    
    <h2>Preview:</h2>
    <pre id="preview"></pre>

    <br />
    <div style="display: flex; justify-content: center; align-items: center; flex-wrap: wrap;">

    <button type="button" onclick="copyToClipboard()">Copy to Clipboard</button>

    <button type="button" onclick="downloadPython()">Download tracker.py</button>

    <button type="button" class="btn-coming-soon" onclick="alert('Coming Soon!')">Download .sh</button>
    </div>
    <br />
    <br />

    <a href="/macos/next">What's next?</a>
    
</div>